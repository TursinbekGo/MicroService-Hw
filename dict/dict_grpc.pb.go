// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dict/dict.proto

package dict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TranslateClient is the client API for Translate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslateClient interface {
	Dictionary(ctx context.Context, in *DictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*Result, error)
	Converter(ctx context.Context, in *MoneyConverterRequest, opts ...grpc.CallOption) (*MoneyConverterResponse, error)
	Square(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error)
	MaxNum(ctx context.Context, in *MaxRequest, opts ...grpc.CallOption) (*MaxResponse, error)
}

type translateClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslateClient(cc grpc.ClientConnInterface) TranslateClient {
	return &translateClient{cc}
}

func (c *translateClient) Dictionary(ctx context.Context, in *DictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error) {
	out := new(DictionaryResponse)
	err := c.cc.Invoke(ctx, "/dict.Translate/Dictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/dict.Translate/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateClient) GetCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/dict.Translate/GetCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateClient) Converter(ctx context.Context, in *MoneyConverterRequest, opts ...grpc.CallOption) (*MoneyConverterResponse, error) {
	out := new(MoneyConverterResponse)
	err := c.cc.Invoke(ctx, "/dict.Translate/Converter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateClient) Square(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/dict.Translate/Square", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateClient) MaxNum(ctx context.Context, in *MaxRequest, opts ...grpc.CallOption) (*MaxResponse, error) {
	out := new(MaxResponse)
	err := c.cc.Invoke(ctx, "/dict.Translate/MaxNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslateServer is the server API for Translate service.
// All implementations must embed UnimplementedTranslateServer
// for forward compatibility
type TranslateServer interface {
	Dictionary(context.Context, *DictionaryRequest) (*DictionaryResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	GetCurrency(context.Context, *CurrencyRequest) (*Result, error)
	Converter(context.Context, *MoneyConverterRequest) (*MoneyConverterResponse, error)
	Square(context.Context, *NumberRequest) (*NumberResponse, error)
	MaxNum(context.Context, *MaxRequest) (*MaxResponse, error)
	mustEmbedUnimplementedTranslateServer()
}

// UnimplementedTranslateServer must be embedded to have forward compatible implementations.
type UnimplementedTranslateServer struct {
}

func (UnimplementedTranslateServer) Dictionary(context.Context, *DictionaryRequest) (*DictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dictionary not implemented")
}
func (UnimplementedTranslateServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTranslateServer) GetCurrency(context.Context, *CurrencyRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (UnimplementedTranslateServer) Converter(context.Context, *MoneyConverterRequest) (*MoneyConverterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Converter not implemented")
}
func (UnimplementedTranslateServer) Square(context.Context, *NumberRequest) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (UnimplementedTranslateServer) MaxNum(context.Context, *MaxRequest) (*MaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxNum not implemented")
}
func (UnimplementedTranslateServer) mustEmbedUnimplementedTranslateServer() {}

// UnsafeTranslateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslateServer will
// result in compilation errors.
type UnsafeTranslateServer interface {
	mustEmbedUnimplementedTranslateServer()
}

func RegisterTranslateServer(s grpc.ServiceRegistrar, srv TranslateServer) {
	s.RegisterService(&Translate_ServiceDesc, srv)
}

func _Translate_Dictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServer).Dictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.Translate/Dictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServer).Dictionary(ctx, req.(*DictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translate_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.Translate/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translate_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.Translate/GetCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServer).GetCurrency(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translate_Converter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyConverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServer).Converter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.Translate/Converter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServer).Converter(ctx, req.(*MoneyConverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translate_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.Translate/Square",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServer).Square(ctx, req.(*NumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translate_MaxNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServer).MaxNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.Translate/MaxNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServer).MaxNum(ctx, req.(*MaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Translate_ServiceDesc is the grpc.ServiceDesc for Translate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Translate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.Translate",
	HandlerType: (*TranslateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dictionary",
			Handler:    _Translate_Dictionary_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Translate_Add_Handler,
		},
		{
			MethodName: "GetCurrency",
			Handler:    _Translate_GetCurrency_Handler,
		},
		{
			MethodName: "Converter",
			Handler:    _Translate_Converter_Handler,
		},
		{
			MethodName: "Square",
			Handler:    _Translate_Square_Handler,
		},
		{
			MethodName: "MaxNum",
			Handler:    _Translate_MaxNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict/dict.proto",
}
